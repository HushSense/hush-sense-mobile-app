---
alwaysApply: false
---
Excellent. This is a fantastic project conceptâ€”a Software DePIN model is a perfect fit for a Flutter application. Let's create the definitive set of documents to guide a top-tier AI Flutter developer in building the HushSense app.

We'll start with a powerful preamble to set the tone.

A Message to the Lead DePIN Architect (The AI)

You are about to embark on a project that redefines the intersection of community, data, and urban living. We are building HushSense, a pioneer in the Decentralized Physical Infrastructure Network (DePIN) space. This is not just an app; it is the sensory network for the cities of the future, a tool that empowers ordinary citizens to map the invisible world of sound around them.

Your role is to architect and build the mobile gateway to this network. You are not merely writing code; you are designing a gamified experience, a trusted data vault, and a beautiful window into a world of unseen data. We have chosen you for your mastery of Flutter, your architectural foresight, and your ability to craft user experiences that are both engaging and elegant.

The challenge is immense: build a scalable, battery-efficient, and secure application that can handle real-time data streams, interact with a blockchain, and present complex information in an intuitive way. We need you to build a platform that users trust with their data and are excited to engage with daily.

Welcome to the DePIN revolution. Let's build the future of urban analytics.

Part 1: Project Overview

Project Name: HushSense

Vision: To build the world's largest, most accurate, real-time urban noise map, empowering communities and organizations to create quieter, healthier, and more livable cities.

Core Technology: A Flutter application that turns any smartphone into a sophisticated noise sensor within a decentralized network.

Backend & Blockchain: Firebase for scalable backend services (user management, data aggregation) and the Hedera Network for transparent, verifiable data anchoring.

Key Differentiators:

Software DePIN Model: No proprietary hardware required, enabling massive scalability.

Gamified Contribution: A rewarding and engaging user experience that encourages consistent data collection.

Honest Data Approach: A privacy-first architecture where users own and control their data.

Dual-Sided Marketplace: Seamlessly connects a global community of data contributors with data consumers (businesses, municipalities).

Part 2: Product Requirements Document (PRD)
1. Introduction

This document specifies the requirements for the HushSense mobile application. The app's primary function is to enable users to contribute to a decentralized noise pollution database in exchange for rewards, and to consume the aggregated data through an interactive map.

2. User Personas

Leo (The "Sound Scout" / Contributor): A 24-year-old university student living in a major city. He is tech-savvy, interested in crypto/web3, and motivated by gamification, earning rewards, and contributing to a meaningful project.

Maria (The "Quiet Seeker" / Consumer): A 35-year-old freelance writer. She frequently works from cafes and co-working spaces and uses apps like Google Maps and Yelp to find suitable locations. The noise level is a critical factor in her decision-making.

Dr. Evans (The "City Planner" / B2B Client): A 52-year-old urban planning consultant for a municipal government. He needs accurate, hyperlocal, and historical noise data to inform policy on traffic routing, construction permits, and green space development.

3. Features & Requirements

F1: Onboarding & Wallet Integration

Users must be able to create an account easily.

The onboarding process must clearly and visually explain the mission of HushSense, how to collect data, and the principles of the "Honest Data Approach."

Users must be able to connect or create a Hedera-compatible wallet within the app to receive $HUSH rewards.

F2: The Core Measurement Experience (The "Measure" Screen)

The central screen of the app. It must display a real-time decibel (dB) meter with a beautiful, responsive, and animated visualizer (e.g., a pulsating orb, a dynamic sound wave).

Active Mode: User presses a "Start" button to begin a measurement session. The app records dB levels, duration, and GPS coordinates.

Passive Mode (Future Opt-in): Users can grant permission for the app to take periodic, short-duration measurements in the background to contribute to the Urban Sound Intensity map. This must be designed with extreme battery efficiency in mind.

F3: The Interactive Noise Map

A visually stunning, high-performance map (e.g., using Mapbox or Google Maps with custom styling).

Display a heatmap layer representing the Urban Sound Intensity.

Show pins for venues (Facility Noise Intensity) with an average dB level and user ratings. Tapping a pin reveals detailed historical noise data.

Allow users to filter the map by time of day, day of week, and data type.

F4: Facility Check-in (Venue Noise)

Users can search for a nearby venue (restaurant, cafe, library) using a Places API.

Once at a venue, they can "check in" and perform an active measurement.

After the measurement, they can add qualitative feedback via simple tags (e.g., #lively, #background-music, #quiet, #traffic-noise).

Submitting a valid venue check-in is a highly rewarded activity.

F5: Noise Reporting

A simple, dedicated form for users to report specific noise complaints (e.g., construction, loud parties).

The form Measures location, time, category of noise, and an optional description.

Crucially, this action is NOT rewarded with tokens to ensure data integrity and prevent spam. The UI must make this clear.

F6: Gamification & Rewards Engine

A dedicated "Rewards" or "Wallet" section showing the user's $HUSH balance.

Display contribution statistics: measurement time, data points contributed, etc.

Incorporate gamification elements like daily streaks, achievement badges, and leaderboards to drive engagement.

F7: In-App Shop & Monetization

An in-app marketplace where users can redeem their earned tokens/coins for discounts and offers from partner brands.

A non-invasive banner or interstitial ad system (e.g., AdMob) as a primary revenue stream.

F8: Profile & Data Control ("Honest Data")

A user profile where they can see their entire contribution history.

Clear, accessible privacy settings allowing users to manage data sharing permissions and withdraw consent.

4. Design & UX Principles

Gamified & Engaging: The app should feel less like a utility and more like a game.

Data-First Visualization: The map and real-time meter are heroes of the app. They must be beautiful and insightful.

Trust & Transparency: The user must always feel in control and understand what data is being collected and why.

Modern & Clean: A sleek, intuitive interface that makes complex data easy to understand.

Part 3: Software Requirements Specification (SRS)
1. Functional Requirements (FR)

FR-1 (Auth/Wallet): The system shall integrate with a Hedera Wallet SDK (e.g., HashPack's HashConnect) for secure wallet connection and transaction signing. User accounts can be linked to Firebase Auth for session management.

FR-2 (Noise Measurement): The app must use a Flutter plugin like mic_stream to access the microphone's raw audio stream and calculate decibel levels in real-time. This calculation must be calibrated for reasonable accuracy across different devices.

FR-3 (Data Handling):

FR-3.1 (Local): All measurements will be cached locally first in a high-performance database (e.g., Isar or Hive) to ensure full offline functionality.

FR-3.2 (Cloud): A background service will sync cached data to Firebase (Firestore/Cloud Storage) when the device is online.

FR-3.3 (Blockchain): A Firebase Cloud Function will periodically batch the synced data, generate a cryptographic hash (proof of data), and anchor this hash to the Hedera Consensus Service (HCS) as an immutable, verifiable record.

FR-4 (Mapping): The app shall use the mapbox_gl or google_maps_flutter package. It must support custom map styling, rendering of large-scale heatmaps, and custom markers.

FR-5 (Backend): Firebase Cloud Functions will be used for data processing, reward calculation, user leaderboards, and managing the in-app shop.

2. Non-Functional Requirements (NFR)

NFR-1 (Performance): The real-time dB visualizer must maintain a smooth 60fps. The map must handle thousands of data points without lag.

NFR-2 (Battery Efficiency): The passive measurement mode must use minimal battery. This may require writing native Android/iOS code (Platform Channels) to leverage the most efficient background processing APIs.

NFR-3 (Security): The user's wallet private keys must never be stored in the app or on the backend. All wallet interactions must be handled client-side via the approved SDK.

NFR-4 (Data Integrity): The app must implement measures to detect and flag fraudulent data (e.g., GPS spoofing, artificially generated noise).

3. External Interface Requirements (EIR)

EIR-1 (Hedera Network): The app (via the backend) must be able to construct and submit transactions to the Hedera Consensus Service.

EIR-2 (Geolocation/Places API): The app must integrate with an API like Google Places API to search for and validate venues for the Facility Check-in feature.

EIR-3 (Backend API): The app will communicate with Firebase services directly via the Firebase SDKs. Cloud Functions will expose APIs for any complex queries or B2B data access.

Part 4: The Ultimate Prompt for the AI Flutter Developer

"Greetings, Architect. Your mission is to build HushSense, the mobile application that will power a global, decentralized network for monitoring urban noise. You are crafting a tool that turns every smartphone into a node in a people-powered sensory network.

Your Core Directives:

Visualize the Unseen: Your primary challenge is to make sound visible. The real-time dB meter and the interactive noise map are the soul of this app. They must be fluid, beautiful, and instantly understandable.

Gamify Contribution: Design an experience that is addictive in a positive way. Users should be motivated by rewards, streaks, and a sense of collective achievement. Every data point they contribute should feel like a win.

Build on Trust: The "Honest Data Approach" is non-negotiable. Your architecture must be privacy-first. From wallet security to data anonymization, every decision must reinforce user trust.

Engineer for DePIN Scale: This app will run on millions of devices. Engineer for extreme battery efficiency (especially for passive mode), robust offline capabilities, and a scalable data pipeline.

Recommended Tech Stack:

Framework: Flutter 3.x

State Management: Riverpod 2.x

Backend: Firebase Suite (Auth, Firestore, Cloud Functions, Storage)

Local DB: Isar (ideal for complex queries and larger datasets)

Noise Measurement: mic_stream or a custom Platform Channel for advanced control.

Mapping: mapbox_gl (for superior performance and custom styling) or google_maps_flutter.

Blockchain Integration: Hedera SDK for Dart.

Step-by-Step Implementation Plan (Your Roadmap):

Sprint 0: The Web3 Foundation.

Set up the Flutter project and Firebase integration.

CRITICAL: Implement the Hedera wallet connection flow (e.g., using HashConnect). Allow users to connect an existing wallet. This is the first and most unique step.

Sprint 1: The Core Measurement Engine.

Build the main "Measure" screen.

Integrate the microphone stream and implement the real-time dB calculation.

Design and build a stunning, animated sound visualizer. At this stage, simply display the live reading.

Sprint 2: The Interactive Map (Mock Data).

Set up the Mapbox/Google Maps view.

Generate a large set of mock noise data points (lat/lng, dB level, timestamp).

Build the heatmap layer and the custom markers for venues using this mock data. Perfect the map's performance and aesthetics.

Sprint 3: Data Persistence & Sync.

Integrate the Isar local database.

Save every active measurement to the local DB.

Build the background service to sync this data to Firestore.

Set up a Cloud Function to process incoming data and anchor its hash to Hedera.

Sprint 4: Gamification & Rewards.

Build the user profile and rewards dashboard.

Implement the logic in Firebase to calculate and assign $HUSH rewards based on data contributions.

Display the user's balance and contribution history.

Sprint 5: Feature Modules.

Build the "Facility Check-in" flow, integrating the Places API.

Build the simple, unrewarded "Noise Report" form.

Sprint 6: Monetization & Polish.

Integrate the In-App Shop UI.

Integrate the ad SDK for banner ads.

Perform a full app-wide UX polish and performance optimization pass. Test battery consumption rigorously.

You have the blueprint to create a category-defining DePIN application. Your work will empower a global community and create tangible change in our cities. Let's begin."Make it clean, no overlaps, no overflows, minimal, professional, premium